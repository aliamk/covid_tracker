{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64f40b4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport CountUp from 'react-countup'\nimport cx from 'classnames' // this is allows us to apply multiple styles\n\nimport styles from './Cards.module.css'\n\n const Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\n\n  if(!confirmed) {\n    return 'Loading...'\n  }\n\n  return (\n    \n    <div className = {styles.container}>\n      <Grid container spacing={3} justify=\"center\">  {/* The main container 'div' */}\n        \n        <Grid item component={Card} xs={12} md={3} className={ cx (styles.card, styles.infected) }>   \n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={ 0 } end={ confirmed.value } duration={ 2.5 } separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={ cx (styles.card, styles.recovered) }>   \n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n            <Typography variant=\"h5\">              \n              <CountUp start={ 0 } end={ recovered.value } duration={ 2.5 } separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n            <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={ cx (styles.card, styles.deaths) }>   \n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp start={ 0 } end={ deaths.value } duration={ 2.5 } separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n            <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n      </Grid>\n    </div>\n\n  )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\n\n\nexport const fetchData = async ( country ) => {\n  let changeableUrl = url\n\n  if(country) {\n    changeableUrl = `${url}/countries/${country}`\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl)\n    return { confirmed, recovered, deaths, lastUpdate }\n  } catch (error) {\n    console.log(error)\n  }\n }\n\n export const fetchDailyData = async () => {\n   try {\n    const { data } = await axios.get(`${url}/daily`)\n\n    const modifiedData = data.map(( dailyData ) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }))\n    return modifiedData\n   } catch (error) {\n    console.log(error)\n   }\n }\n\n export const fetchCountries = async () => {\n   try {\n    const { data: { countries }} = await axios.get(`${url}/countries`)\n    return countries.map((country) => country.name)\n    // console.log(response)\n   } catch (error) {\n     console.log(error)\n   }\n }\n\n// 3: ANOTHER REWRITE TO DESTRUCTURE THE DATA PARAMETER'S ITEMS\n// export const fetchData = async () => {\n//   try {\n//     const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url)\n\n//     const modifiedData = {\n//       confirmed,\n//       recovered,\n//       deaths,\n//       lastUpdate,\n//     }\n//     return modifiedData\n//   } catch (error) {\n\n//   }\n//  }\n\n// 2: REWRITE API FETCH THAT ONLY GETS THE DATA PARAMETER OF THE API RESPONSE AND DESTRUCTURES THE ITEMS WE NEED FROM DATA\n// export const fetchData = async () => {\n//   try {\n//     const { data } = await axios.get(url)\n\n//     const modifiedData = {\n//       confirmed: data.confirmed,\n//       recovered: data.recovered,\n//       deaths: data.deaths,\n//       lastUpdate: data.lastUpdate,\n//     }\n//     return response\n//   } catch (error) {\n\n//   }\n//  }\n\n// 1: FIRST API FETCH THAT GETS ALL OF THE API'S RESPONSE PARAMETERS\n// export const fetchData = async () => {\n//   try {\n//     const response = await axios.get(url)\n//     return response\n//     // console.log(response) replace with RETURN bc using export\n//   } catch (error) {\n\n//   }\n// }","import React, { useState, useEffect } from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\n\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n\n  const [ dailyData, setDailyData ] = useState([])\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData()) // const dailyData = await fetchDailyData()\n    }\n    // console.log(dailyData)\n    fetchAPI()\n  }, [])\n\n  // If the dailyData is available from the API, return the Line chart, else return Null\n  const lineChart = (\n    dailyData.length \n      ? (\n        <Line \n          data={{\n            labels: dailyData.map(( { date } ) => date),\n            datasets: [{\n              data: dailyData.map(({ confirmed }) => confirmed),\n              label: 'Infected',\n              borderColor: '#3333ff',\n              fill: true,\n            }, {\n              data: dailyData.map(( { deaths } ) => deaths),\n              label: 'Deaths',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255, 0, 0, 0.5)',\n              fill: true,\n            }],\n          }}\n        /> ) : null\n  )\n\n  console.log(confirmed, recovered, deaths)\n\n  const barChart = (\n    confirmed\n      ? (\n        <Bar \n          data={{\n            labels: ['Infected', 'Recovered', 'Deaths'],\n            datasets: [{\n              label: 'People',\n              backgroundColor: [\n                'rgba(0, 0, 255, 0.5)',\n                'rgba(0, 255, 0, 0.5)',\n                'rgba(255, 0, 0, 0.5)',\n              ],\n              data: [confirmed.value, recovered.value, deaths.value]\n            }]\n          }}\n          options={{\n            legend: { display: false },\n            title: { display: true, text: `Current state in ${country}`}\n          }}\n        />\n      ) : null\n  )\n\n  return (\n    <div className={styles.container}>\n      { country ? barChart : lineChart }\n    </div>\n  )\n}\n\nexport default Chart\n","import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\nimport styles from './CountryPicker.module.css'\n\nimport { fetchCountries } from '../../api'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n  const [fetchedCountries, setFetchedCountries] = useState([])\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries())\n    }\n    fetchAPI()\n  }, [setFetchedCountries]) //only run when this value changes\n\n  // console.log(fetchedCountries)\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        { fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}  \n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker","import React from 'react';\n\n// import Cards from './components/Cards/Cards'\n// import Chart from './components/Chart/Chart'\n// import CountryPicker from './components/CountryPicker/CountryPicker'\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css'\nimport { fetchData } from './api' // to call the component\n\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component {\n  // Get the api data into <Cards />\n  state = {\n    data: {},\n    country: '',\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    // console.log(fetchedData)\n    this.setState({ data : fetchedData, country: country }) \n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData()\n    this.setState({ data : fetchedData }) \n\n    // console.log(fetchedData)\n  }\n\n  render () {\n\n    const { data, country } = this.state\n\n    return (\n      <div className={ styles.container } >\n      <img className={ styles.image } src={ coronaImage } alt=\"COVID-19\" />\n        <Cards data={ data } />  {/*  {this.state.data }  */}\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={ data } country={ country }/>\n      </div>\n    )}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}